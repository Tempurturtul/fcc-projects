(function () {
'use strict';

// See: https://www.mediawiki.org/wiki/API:Main_page

var endpoint = 'https://en.wikipedia.org/w/api.php';
var apiUserAgent = 'TempurturtulFCCWikiViewer/1.0';

function getArticles(query, opts) {
	if ( opts === void 0 ) opts = {limit: 10};

	var params = [
		// Main data.
		'action=query',
		'format=json',
		'origin=*',
		// Action data.
		'prop=info|extracts',
		'generator=search',
		// Format data.
		'formatversion=1',
		// Prop Data.
		'inprop=url',
		'exchars=250',
		("exlimit=" + (opts.limit)),
		'exintro=1',
		("gsrsearch=" + query),
		("gsrlimit=" + (opts.limit))
	];
	var url = endpoint + "?" + (params.join('&'));

	var headers = {
		'Api-User-Agent': apiUserAgent
	};

	return fetch(url, {headers: headers})
		.then(function (response) {
			if (response.ok) {
				return response.json();
			}

			throw new Error(("Could not fetch wikipedia articles: " + (response.statusText)));
		});
}

function getRandomArticle() {
	var params = [
		// Main data.
		'action=query',
		'format=json',
		'origin=*',
		// Action data.
		'prop=info|extracts',
		'generator=random',
		// Format data.
		'formatversion=1',
		// Prop Data.
		'inprop=url',
		'exchars=200',
		'grnnamespace=0',
		'grnfilterredir=nonredirects',
		'grnlimit=1'
	];
	var url = endpoint + "?" + (params.join('&'));

	var headers = {
		'Api-User-Agent': apiUserAgent
	};

	return fetch(url, {headers: headers})
		.then(function (response) {
			if (response.ok) {
				return response.json();
			}

			throw new Error(("Could not fetch random wikipedia article: " + (response.statusText)));
		});
}

var wikipedia = {
	getArticles: getArticles,
	getRandomArticle: getRandomArticle
};

var wikiElem = document.querySelector('.wikipedia-viewer');
var wikiFormElem = wikiElem.querySelector('.wikipedia-form');
var wikiFormSearchElem = wikiElem.querySelector('.wikipedia-form__search');
var wikiFormRandomElem = wikiElem.querySelector('.wikipedia-form__random');
var wikiArticlesElem = wikiElem.querySelector('.wikipedia-articles');

var loadedArticles;

init();

function init() {
	// Remove no-js classes.
	wikiElem.classList.remove('wikipedia-viewer--no-js');

	// Add event listeners.
	wikiFormElem.addEventListener('submit', handleSearchFormSubmit);
	wikiFormRandomElem.addEventListener('click', handleRandomButtonClick);
}

function loadArticles(query, opts) {
	if ( opts === void 0 ) opts = {};

	if (!query && !opts.random) {
		throw new Error('Must provide a query string or set opts.random to true.');
	}

	var randomArticle = !query && opts.random;

	if (randomArticle) {
		wikipedia.getRandomArticle()
			.then(load)
			.catch(abort);
	} else {
		wikipedia.getArticles(query)
			.then(load)
			.catch(abort);
	}

	function load(data) {
		var pages = data.query.pages;
		var articles = Object.keys(pages).map(function (key) { return pages[key]; });

		loadedArticles = articles;

		renderArticles();
	}

	function abort(err) {
		console.log(err);
		loadedArticles = null;
		unrenderArticles();
	}
}

function loadRandomArticle() {
	loadArticles(null, {random: true});
}

function renderArticles() {
	var htmlStr = loadedArticles
		.map(function (article) {
			var title = article.title;
			var fullurl = article.fullurl;
			var extract = article.extract;
			return ("\n\t\t\t\t<article class=\"wikipedia-article\">\n\t\t\t\t\t<h1 class=\"wikipedia-article__title\">\n\t\t\t\t\t\t<a href=\"" + fullurl + "\">" + title + "</a>\n\t\t\t\t\t</h1>\n\t\t\t\t\t<blockquote class=\"wikipedia-article__extract\" cite=\"" + fullurl + "\">\n\t\t\t\t\t\t" + (extract || '') + "\n\t\t\t\t\t</blockquote>\n\t\t\t\t</article>\n\t\t\t");
		})
		.join('\n');

	wikiArticlesElem.innerHTML = htmlStr;
}

function unrenderArticles() {
	loadedArticles = null;
	wikiArticlesElem.innerHTML = '';
}

function handleSearchFormSubmit(e) {
	e.preventDefault();

	var query = wikiFormSearchElem.value;

	loadArticles(query);
}

function handleRandomButtonClick() {
	loadRandomArticle();
}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
