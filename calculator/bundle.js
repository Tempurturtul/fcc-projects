(function () {
'use strict';

/* eslint-disable no-eval */

// "Copy" eval to make it use global scope instead of local.
// (See: https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval)
var eval2 = eval;

var calculatorElem = document.querySelector('.calculator');
var calculatorDisplayElem = calculatorElem.querySelector('.calculator__display');
var calculatorDisplayTextElem = calculatorElem.querySelector('.calculator__display-text');
var calculatorButtonElems = calculatorElem.querySelectorAll('.calculator__button');

var showingError = false;

init();

function init() {
	// Remove no-js classes.
	calculatorElem.classList.remove('calculator--no-js');

	// Add calculator button event listeners.
	Array.from(calculatorButtonElems).forEach(function (elem) {
		elem.addEventListener('click', handleCalcButtonClick);
	});

	// Add keydown event listener.
	document.addEventListener('keydown', handleKeydown);
}

function evaluate(expression) {
	// Remove any whitespace.
	expression = expression.replace(/\s/g, '');

	// Invalid expression characters.
	// (Anything not operators, numbers, decimals, or parens.)
	var re = /[^+|\-|*|/|\d|.|(|)]/;

	if (re.test(expression)) {
		throw new Error(("Invalid expression " + expression));
	}

	return eval2(expression);
}

function handleCalcButtonClick(e) {
	var char = e.target.innerHTML;

	switch (char) {
		case '&lt;':
			backspace();
			break;
		case 'c':
			clear();
			break;
		case '=':
			equals();
			break;
		default:
			// Add the character to the expression.
			input(char);
	}
}

function handleKeydown(e) {
	var key = e.key;

	if (key === 'Backspace') {
		return backspace();
	}

	if (key === 'Delete' || key === 'c') {
		return clear();
	}

	if (key === 'Enter') {
		return equals();
	}

	var validInputs = '()*/+-.0123456789'.split('');

	if (validInputs.indexOf(key) !== -1) {
		return input(key);
	}
}

function backspace() {
	if (showingError) {
		return clear();
	}

	var text = calculatorDisplayTextElem.innerHTML;

	// Trim the last character.
	text = text.slice(0, text.length - 1);

	calculatorDisplayTextElem.innerHTML = text;
}

function clear() {
	calculatorDisplayTextElem.innerHTML = '';
	showingError = false;
}

function equals() {
	if (showingError) {
		return clear();
	}

	try {
		var result = evaluate(calculatorDisplayTextElem.innerHTML);
		calculatorDisplayTextElem.innerHTML = (result === undefined) ? '' : result;
	} catch (err) {
		console.log(err);
		calculatorDisplayTextElem.innerHTML = 'Error';
		showingError = true;
	}
}

function input(char) {
	if (showingError) {
		clear();
	}

	calculatorDisplayTextElem.innerHTML += char;

	// Make sure we're scrolled far enough to the right.
	calculatorDisplayElem.scrollLeft = 9999;
}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tZXZhbCAqL1xuXG4vLyBcIkNvcHlcIiBldmFsIHRvIG1ha2UgaXQgdXNlIGdsb2JhbCBzY29wZSBpbnN0ZWFkIG9mIGxvY2FsLlxuLy8gKFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvd2lraS9Ucm91Ymxlc2hvb3RpbmcjYXZvaWRpbmctZXZhbClcbmNvbnN0IGV2YWwyID0gZXZhbDtcblxuY29uc3QgY2FsY3VsYXRvckVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FsY3VsYXRvcicpO1xuY29uc3QgY2FsY3VsYXRvckRpc3BsYXlFbGVtID0gY2FsY3VsYXRvckVsZW0ucXVlcnlTZWxlY3RvcignLmNhbGN1bGF0b3JfX2Rpc3BsYXknKTtcbmNvbnN0IGNhbGN1bGF0b3JEaXNwbGF5VGV4dEVsZW0gPSBjYWxjdWxhdG9yRWxlbS5xdWVyeVNlbGVjdG9yKCcuY2FsY3VsYXRvcl9fZGlzcGxheS10ZXh0Jyk7XG5jb25zdCBjYWxjdWxhdG9yQnV0dG9uRWxlbXMgPSBjYWxjdWxhdG9yRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCcuY2FsY3VsYXRvcl9fYnV0dG9uJyk7XG5cbmxldCBzaG93aW5nRXJyb3IgPSBmYWxzZTtcblxuaW5pdCgpO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuXHQvLyBSZW1vdmUgbm8tanMgY2xhc3Nlcy5cblx0Y2FsY3VsYXRvckVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnY2FsY3VsYXRvci0tbm8tanMnKTtcblxuXHQvLyBBZGQgY2FsY3VsYXRvciBidXR0b24gZXZlbnQgbGlzdGVuZXJzLlxuXHRBcnJheS5mcm9tKGNhbGN1bGF0b3JCdXR0b25FbGVtcykuZm9yRWFjaChlbGVtID0+IHtcblx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2FsY0J1dHRvbkNsaWNrKTtcblx0fSk7XG5cblx0Ly8gQWRkIGtleWRvd24gZXZlbnQgbGlzdGVuZXIuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlkb3duKTtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGUoZXhwcmVzc2lvbikge1xuXHQvLyBSZW1vdmUgYW55IHdoaXRlc3BhY2UuXG5cdGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoL1xccy9nLCAnJyk7XG5cblx0Ly8gSW52YWxpZCBleHByZXNzaW9uIGNoYXJhY3RlcnMuXG5cdC8vIChBbnl0aGluZyBub3Qgb3BlcmF0b3JzLCBudW1iZXJzLCBkZWNpbWFscywgb3IgcGFyZW5zLilcblx0Y29uc3QgcmUgPSAvW14rfFxcLXwqfC98XFxkfC58KHwpXS87XG5cblx0aWYgKHJlLnRlc3QoZXhwcmVzc2lvbikpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZXhwcmVzc2lvbiAke2V4cHJlc3Npb259YCk7XG5cdH1cblxuXHRyZXR1cm4gZXZhbDIoZXhwcmVzc2lvbik7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNhbGNCdXR0b25DbGljayhlKSB7XG5cdGNvbnN0IGNoYXIgPSBlLnRhcmdldC5pbm5lckhUTUw7XG5cblx0c3dpdGNoIChjaGFyKSB7XG5cdFx0Y2FzZSAnJmx0Oyc6XG5cdFx0XHRiYWNrc3BhY2UoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2MnOlxuXHRcdFx0Y2xlYXIoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJz0nOlxuXHRcdFx0ZXF1YWxzKCk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0Ly8gQWRkIHRoZSBjaGFyYWN0ZXIgdG8gdGhlIGV4cHJlc3Npb24uXG5cdFx0XHRpbnB1dChjaGFyKTtcblx0fVxufVxuXG5mdW5jdGlvbiBoYW5kbGVLZXlkb3duKGUpIHtcblx0Y29uc3Qga2V5ID0gZS5rZXk7XG5cblx0aWYgKGtleSA9PT0gJ0JhY2tzcGFjZScpIHtcblx0XHRyZXR1cm4gYmFja3NwYWNlKCk7XG5cdH1cblxuXHRpZiAoa2V5ID09PSAnRGVsZXRlJyB8fCBrZXkgPT09ICdjJykge1xuXHRcdHJldHVybiBjbGVhcigpO1xuXHR9XG5cblx0aWYgKGtleSA9PT0gJ0VudGVyJykge1xuXHRcdHJldHVybiBlcXVhbHMoKTtcblx0fVxuXG5cdGNvbnN0IHZhbGlkSW5wdXRzID0gJygpKi8rLS4wMTIzNDU2Nzg5Jy5zcGxpdCgnJyk7XG5cblx0aWYgKHZhbGlkSW5wdXRzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcblx0XHRyZXR1cm4gaW5wdXQoa2V5KTtcblx0fVxufVxuXG5mdW5jdGlvbiBiYWNrc3BhY2UoKSB7XG5cdGlmIChzaG93aW5nRXJyb3IpIHtcblx0XHRyZXR1cm4gY2xlYXIoKTtcblx0fVxuXG5cdGxldCB0ZXh0ID0gY2FsY3VsYXRvckRpc3BsYXlUZXh0RWxlbS5pbm5lckhUTUw7XG5cblx0Ly8gVHJpbSB0aGUgbGFzdCBjaGFyYWN0ZXIuXG5cdHRleHQgPSB0ZXh0LnNsaWNlKDAsIHRleHQubGVuZ3RoIC0gMSk7XG5cblx0Y2FsY3VsYXRvckRpc3BsYXlUZXh0RWxlbS5pbm5lckhUTUwgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBjbGVhcigpIHtcblx0Y2FsY3VsYXRvckRpc3BsYXlUZXh0RWxlbS5pbm5lckhUTUwgPSAnJztcblx0c2hvd2luZ0Vycm9yID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGVxdWFscygpIHtcblx0aWYgKHNob3dpbmdFcnJvcikge1xuXHRcdHJldHVybiBjbGVhcigpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRjb25zdCByZXN1bHQgPSBldmFsdWF0ZShjYWxjdWxhdG9yRGlzcGxheVRleHRFbGVtLmlubmVySFRNTCk7XG5cdFx0Y2FsY3VsYXRvckRpc3BsYXlUZXh0RWxlbS5pbm5lckhUTUwgPSAocmVzdWx0ID09PSB1bmRlZmluZWQpID8gJycgOiByZXN1bHQ7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUubG9nKGVycik7XG5cdFx0Y2FsY3VsYXRvckRpc3BsYXlUZXh0RWxlbS5pbm5lckhUTUwgPSAnRXJyb3InO1xuXHRcdHNob3dpbmdFcnJvciA9IHRydWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gaW5wdXQoY2hhcikge1xuXHRpZiAoc2hvd2luZ0Vycm9yKSB7XG5cdFx0Y2xlYXIoKTtcblx0fVxuXG5cdGNhbGN1bGF0b3JEaXNwbGF5VGV4dEVsZW0uaW5uZXJIVE1MICs9IGNoYXI7XG5cblx0Ly8gTWFrZSBzdXJlIHdlJ3JlIHNjcm9sbGVkIGZhciBlbm91Z2ggdG8gdGhlIHJpZ2h0LlxuXHRjYWxjdWxhdG9yRGlzcGxheUVsZW0uc2Nyb2xsTGVmdCA9IDk5OTk7XG59XG4iXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7O0FBSUFBLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQzs7QUFFbkJBLElBQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0RBLElBQU0scUJBQXFCLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ25GQSxJQUFNLHlCQUF5QixHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUM1RkEsSUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7QUFFckZDLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQzs7QUFFekIsSUFBSSxFQUFFLENBQUM7O0FBRVAsU0FBUyxJQUFJLEdBQUc7O0NBRWYsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7O0NBR3JELEtBQUssQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLEVBQUM7RUFDOUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxxQkFBcUIs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
