(function () {
'use strict';

var UNITS = {
	METRIC: 'metric',
	IMPERIAL: 'imperial'
};
var defaultUnits = UNITS.METRIC;
var apiUrl = '//api.openweathermap.org/data/2.5/weather';

/**
 * Gets current weather data from OpenWeatherMap.
 * @param {string|number|object} location - Address, US zip code, or Position object.
 * @param {string} [units=defaultUnits] - Units used.
 * @return {promise} - Promise for JSON format weather data.
 */
function getCurrent(location, units) {
	if ( units === void 0 ) units = defaultUnits;

	var query = "?APPID=3ede0ecb10ad0159f505c52fdf1f3d31&units=" + units;  // Congratulations, you've found a key! It's a free key, please be nice to it so I don't have to make another. Thank you!

	// Define query based on the type of location passed.
	if (typeof location === 'object') {
		// Position object.
		query += "&lat=" + (location.coords.latitude) + "&lon=" + (location.coords.longitude);
	} else if (typeof location === 'number' || /^\d+$/.test(location)) {
		// US zip code.
		query += "&zip=" + location + ",us";
	} else if (typeof location === 'string') {
		// City.
		query += "&q=" + location;
	}

	var url = apiUrl + query;

	console.log('Fetching from ' + url);

	return fetch(url)
		.then(function (response) {
			if (response.ok) {
				return response.json();
			}

			throw new Error(("Could not fetch weather data: " + (response.statusText)));
		});
}

var weather = {
	UNITS: UNITS,
	getCurrent: getCurrent
};

var weatherElem = document.querySelector('.weather');
var weatherFormElem = weatherElem.querySelector('.weather-form');
var weatherSearchElem = weatherElem.querySelector('.weather-form__search');
var weatherUnitToggleElem = weatherElem.querySelector('.weather-form__unit-toggle');
var weatherDataElem = weatherElem.querySelector('.weather-data');

var loadedWeather;
var units = weather.UNITS.IMPERIAL;

init();

/**
 * Initializes the application.
 */
function init() {
	// Remove no-js classes.
	weatherElem.classList.remove('weather--no-js');

	// Add event listeners.
	weatherFormElem.addEventListener('submit', handleWeatherFormSubmit);
	weatherUnitToggleElem.addEventListener('click', handleWeatherUnitToggleClick);

	// If geolocation is available, use it to load the user's current local weather.
	if ('geolocation' in navigator) {
		navigator.geolocation.getCurrentPosition(loadCurrentWeather);
	}
}

/**
 * Loads current weather data for the given location.
 * @param {string|number|object} location - Address, US zip code, or Position object.
 */
function loadCurrentWeather(location) {
	// Always use metric units. Convert when rendering if necessary.
	weather.getCurrent(location, weather.UNITS.METRIC)
		.then(function (data) {
			loadedWeather = data;
			renderWeather();
		})
		.catch(function (err) {
			console.log(err);
			loadedWeather = null;
			unrenderWeather();
		});
}

/**
 * Renders the loaded weather.
 */
function renderWeather() {
	if (!loadedWeather) {
		return;
	}

	var metric = units === weather.UNITS.METRIC;

	var weatherDataHTML = "\n\t<h2 class=\"weather-data__title\">" + (loadedWeather.name) + "</h2>\n\t<p class=\"weather-data__conditions\">" + (loadedWeather.weather.map(function (obj) { return obj.description; }).join(', ')) + "</p>\n\t<div class=\"weather-data__icons\">\n\t\t" + (loadedWeather.weather.map(function (obj) { return '<img class="weather-data__icon" src="//openweathermap.org/img/w/' + obj.icon + '.png">'; }).join('')) + "\n\t</div>\n\t<p class=\"weather-data__temperature\">" + (metric ? loadedWeather.main.temp : celsiusToFahrenheit(loadedWeather.main.temp)) + "&deg; " + (metric ? 'C' : 'F') + "</p>\n\t<p class=\"weather-data__humidity\">" + (loadedWeather.main.humidity) + "% humidity</p>\n\t<p class=\"weather-data__clouds\">" + (loadedWeather.clouds.all) + "% cloud cover</p>\n\t<p class=\"weather-data__wind\">" + (metric ? loadedWeather.wind.speed : metersPerSecToMilesPerHour(loadedWeather.wind.speed)) + " " + (metric ? 'meters/sec' : 'mph') + " wind speed</p>\n\t";

	weatherDataElem.innerHTML = weatherDataHTML;
}

/**
 * Unrenders the weather.
 */
function unrenderWeather() {
	weatherDataElem.innerHTML = '';
}

/**
 * Handles the weather form submit event.
 * @param {event} e - The submit event.
 */
function handleWeatherFormSubmit(e) {
	e.preventDefault();

	loadCurrentWeather(weatherSearchElem.value);
}

/**
 * Handles the weather unit toggle button click event.
 * @param {event} e - The toggle button click event.
 */
function handleWeatherUnitToggleClick(e) {
	var metric = units === weather.UNITS.METRIC;

	units = metric ? weather.UNITS.IMPERIAL : weather.UNITS.METRIC;

	renderWeather();
}

/**
 * Converts celsius to fahrenheit.
 * @param {number} c - Temperature in celsius.
 * @return {number} - Temperature in fahrenheit.
 */
function celsiusToFahrenheit(c) {
	return Math.round(c * (9/5) + 32);
}

/**
 * Converts meters per second to miles per hour.
 * @param {number} mps - Speed in meters per second.
 * @return {number} - Speed in miles per hour.
 */
function metersPerSecToMilesPerHour(mps) {
	return Math.round(mps * 2.2369);
}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
